<?phpdefine ('UPDATA_TOOL_URL','http://int.sinaapp.com/sdk/local_environment/upgrade.php') ;define('SAE_CODE_DEPOSITION_ADDRESS','http://deploy.sae.sina.com.cn/') ;define('SAE_SVN_HTTPS','https://svn.sinaapp.com') ;define("APPNUM",10) ;define("APPSTORAGENUM",5) ;define("ALLSTORAGENUM",10) ;define("REDIS_IP","127.0.0.1") ;//include_once __DIR__.DIRECTORY_SEPARATOR."redis".DIRECTORY_SEPARATOR."autoload.php" ;include_once (__DIR__."/json.php") ;$err_message = "" ;class Apache_SAE{	private $basepath = "" ;      // apache所在的根路径	private $basepath_php = "" ;	private $documentroot = "" ;	private $http_port = false ;	private $https_port = false ;	private $old_http_port = false ;	private $old_https_port = false ;	public function __construct($path,$php_path,$document,$http_port,$https_port)	{		$this->basepath = $path ;		$this->basepath_php = $php_path ;		$this->documentroot = $document ;		$this->http_port = $http_port ;		$this->https_port = $https_port ;		$this->old_http_port = getMessage("http_port") ;		$this->old_https_port = getMessage("https_port") ;	}		public function is_run() 	{}		public function is_stop()	{}		public function start() 	{		run('"'.$this->basepath.'bin'.DIRECTORY_SEPARATOR.'httpd" -k start -n SAE_Local_Apache','',$apacheresources) ;	}		public function stop()	{		run('"'.$this->basepath.'bin'.DIRECTORY_SEPARATOR.'httpd" -k stop -n SAE_Local_Apache','',$apacheresources) ;	}		public function restart()	{		run('"'.$this->basepath.'bin'.DIRECTORY_SEPARATOR.'httpd" -k restart -n SAE_Local_Apache','',$apacheresources) ;	}		public function install()	{		run('"'.$this->basepath.'bin'.DIRECTORY_SEPARATOR.'httpd" -k install -n SAE_Local_Apache','',$apacheresources) ;	}		public function uninstall()	{		run('"'.$this->basepath.'bin'.DIRECTORY_SEPARATOR.'httpd" -k uninstall -n SAE_Local_Apache','',$apacheresources) ;	}		//这个函数时用来检测apache服务启动的路径跟当前本地开发环境apache可执行文件路径是否相符	public function apache_dir_is_right()	{		$str = rerun('sc qc SAE_Local_Apache | findstr "BINARY_PATH_NAME.*" ','',$runresources) ;		if($str == "")			return true ;		$httpd_path = "" ;		$begin = false ;		$end = false ;		for($i=0;$i<strlen($str);$i++)		{			if($str[$i]!='"')				continue ;			if($begin === false)				$begin = $i ;			else			{				$end = $i ;				break ;			}		}		$httpd_path = substr($str,$begin+1,$end-$begin-1) ;		$now_http_path = realpath($this->basepath.'bin'.DIRECTORY_SEPARATOR."httpd.exe") ;		if($httpd_path == $now_http_path)			return true ;		else		{			$this->uninstall() ;			$this->install() ;		}		return true ;	}		public function test_SAE_Local_Apache_is_Run()	{		$temp = rerun('sc query SAE_Local_Apache | findstr ".*STATE.*:.*RUNNING.*"',"",$runresources	) ;		if($temp != "")			return true ;		else			return false ;	}		//这个函数是用来判断apache服务是否安装，并且可以查看apache服务是否启动。	//$flag = true返回apache服务是否启动	//$flag = false返回apache服务是否安装	//sc qc SAE_Local_Apache  	public function apache_is_run_or_install($flag = true)	{		if($flag == true)			$str = rerun("sc query",'',$runresources) ;		else			$str = rerun("sc query state= all",'',$runresources) ;		if(strpos($str,"SERVICE_NAME: SAE_Local_Apache") === false)			return false ;		else			return true ;	}		public function config()	{		$getroot = trim($this->basepath,DIRECTORY_SEPARATOR) ;		$apcacheconf = file_get_contents($this->basepath.'conf'.DIRECTORY_SEPARATOR.'httpd.sae');		$apcacheconf = str_replace(array('[$ServeRoot]','[$php5_moudle]','[$PHPIniDir]','[$DocumentRoot]','[$http_port]','[$https_port]'),array($getroot,$this->basepath_php.'php5apache2_2.dll',trim($this->basepath_php,DIRECTORY_SEPARATOR),$this->documentroot,$this->http_port,$this->https_port),$apcacheconf);		file_put_contents($this->basepath.'conf'.DIRECTORY_SEPARATOR.'httpd.conf',$apcacheconf,LOCK_EX);				$sslconf = file_get_contents($this->basepath.'conf'.DIRECTORY_SEPARATOR.'extra'.DIRECTORY_SEPARATOR.'httpd-ssl.sae') ;		$sslconf = str_replace("[ssl_port]",$this->https_port,$sslconf) ;		file_put_contents($this->basepath.'conf'.DIRECTORY_SEPARATOR.'extra'.DIRECTORY_SEPARATOR.'httpd-ssl.conf',$sslconf,LOCK_EX) ;	}		public function change_vhost_port($old_port,$new_port)	{		$apache_conf_dir = $this->basepath.'conf'.DIRECTORY_SEPARATOR ;		$vhost_content = file_get_contents($apache_conf_dir.'vhost.txt') ;		$vhost_content = str_replace("<VirtualHost *:$old_port>","<VirtualHost *:$new_port>",$vhost_content) ;		file_put_contents($apache_conf_dir.'vhost.txt',$vhost_content) ;				$vhost_files = glob($apache_conf_dir.'vhost'.DIRECTORY_SEPARATOR.'*') ;		if(is_array($vhost_files))		{			foreach($vhost_files as $vhostfile)			{				$vhost_content = file_get_contents($vhostfile) ;				$vhost_content = str_replace("<VirtualHost *:$old_port>","<VirtualHost *:$new_port>",$vhost_content) ;				file_put_contents($vhostfile,$vhost_content) ;			}		}	}		public function change_domain($domain)	{		$apache_conf_dir = $this->basepath.'conf'.DIRECTORY_SEPARATOR ;		$vhostpath = $apache_conf_dir.'vhost' ;		remove_dir($vhostpath) ;		if(file_exists($vhostpath) === false)			mkdir($vhostpath) ;	}	}class Redis_SAE{	private $basepath = "" ;        //redis所在的跟路径	private $temp_dir = ""  ;	public function __construct($path)	{		$this->basepath = $path ;		$this->temp_dir = sys_get_temp_dir() ;		$this->temp_dir = trim($this->temp_dir) ;	}		public function is_run() 	{}		public function is_stop()	{	}		public function start()	{		run('"'.$this->basepath.'redis-server.exe" '.$this->temp_dir.DIRECTORY_SEPARATOR.'redis.conf','',$redisresources,true);	}		public function stop()	{		run('"'.$this->basepath.'redis-cli.exe" shutdown','',$redisresources,true);	}		public function config()	{		$redisconf = file_get_contents($this->basepath.'redis.sae') ;		$redisconf = str_replace(array('[$DIR]','[dbnum]'),array($this->temp_dir,APPNUM+1),$redisconf) ;		file_put_contents($this->temp_dir.DIRECTORY_SEPARATOR.'redis.conf',$redisconf,LOCK_EX) ;		file_put_contents($this->basepath.'redis.conf',$redisconf,LOCK_EX) ;	}}class Update_SAE{	public $is_upgrade = false ;	public $version    = "" ;   //线上环境的版本	public $http_proxy = NULL ;	public function __construct($proxy)	{		if($proxy != "")			$this->http_proxy = $proxy ;	}		public function checkLocalUpdate(&$link) 	{		$local_version = getMessage('version') ;		$content=@file_get_contents(UPDATA_TOOL_URL.'?action=version&os=windows&version='.$local_version,false,$this->http_proxy);		if($content == false)			return false ;		$wversion=0;		$lversion=0;  		$c=explode("\n",$content);		foreach($c as $cc)		{			if(strstr($cc,'Windows')!=false)			{				$ccc=preg_split("/[\s\t]/",trim($cc),2) ;				$link=trim($ccc[0]);				$wversion=trim($ccc[1]);				if($wversion == "error")				{					echo iconv('UTF-8','GBK',"您现在的版本过低，不能升级到最新版本，请您到官方下载最新版本\n") ;					return false ;				}			}			else			{				$ccc=preg_split("/[\s\t]/",$cc,2) ;				$link=$ccc[0];				$lversion=$ccc[1];				if($lversion == "error")				{					echo iconv('UTF-8','GBK',"您现在的版本过低，不能升级到最新版本，请您到官方下载最新版本\n") ;					return false ;				}			}		}		if(strncmp(PHP_OS,'W',1)==0)		{			if($local_version!=$wversion)			{				$this->version = $wversion ;				return $wversion;			}		}		else		{			if($local_version!=$lversion)			{				$this->version = $lversion ;				return $lversion;			}		}		return false ;	}		function uploadDisabled()	{		$rootdir = realpath(__DIR__.DIRECTORY_SEPARATOR."..").DIRECTORY_SEPARATOR ;		$disablestr = @file_get_contents(SAE_CODE_DEPOSITION_ADDRESS.'?action=disabledfunc',false,$this->http_proxy) ;		if($disablestr == false)			return false ;		$disablestr = str_replace(array("proc_open,",'proc_close'),array("",''),$disablestr) ;  //本地开发环境要用到这个禁用函数		$disable = returnLines($disablestr) ;		if(count($disable) < 2 )			return false ;		else		{			$messagestr = file_get_contents($rootdir.'emulation'. DIRECTORY_SEPARATOR .'message.txt') ;			$message = returnLines($messagestr) ;			$disable_function = "" ;			$disable_class = "" ;			$is_change = false ;			foreach($message as $key => $value)			{				$temp = preg_split("/[\s\t]/",$value,2) ;				if($temp[0] == 'disable_functions')					$disable_function = $temp[1] ;				else if($temp[0] == 'disable_classes')					$disable_class = $temp[1] ;				else					continue ;			}			$disable_function = trim($disable_function) ;			$disable_class = trim($disable_class) ;			if($disable_function != trim($disable[0]))			{				$old = explode(',',$disable_function) ;				$new = explode(',',trim($disable[0])) ;				echo iconv('UTF-8','GBK',"禁用函数更新，更新信息如下：\n") ;				$is_first = true ;				foreach($old as $func)				{										if(in_array($func,$new) === false)					{						if($is_first === true)						{							echo iconv('UTF-8','GBK',"解禁的禁用函数有：") ;							$is_first = false ;						}						echo $func."  " ;					}				}				$is_first = true ;				foreach($new as $func)				{										if(in_array($func,$old) === false)					{						if($is_first === true)						{							echo iconv('UTF-8','GBK',"\n新添加的禁用函数有：") ;							$is_first = false ;						}						echo $func."  " ;					}				}				$messagestr = str_replace($disable_function,trim($disable[0]),$messagestr) ;				$is_change = true ;				echo "\n\n" ;			}			if($disable_class != trim($disable[1]))			{				$old = explode(',',$disable_class) ;				$new = explode(',',$disable[1]) ;				$is_first = true ;				echo iconv('UTF-8','GBK',"禁用类更新，更新信息如下：\n") ;				foreach($old as $class)				{										if(in_array($class,$new) === false)					{						if($is_first === true)						{							echo iconv('UTF-8','GBK',"解禁的类有：") ;							$is_first === false ;						}						echo $class ."  " ;					}				}								foreach($new as $class)				{										if(in_array($class,$old) === false)					{						if($is_first === true)						{							echo iconv('UTF-8','GBK',"\n新添加的禁用类有：") ;							$is_first === false ;						}						echo $class."  " ;					}				}				$messagestr = str_replace($disable_class,trim($disable[1]),$messagestr) ;				$is_change = true ;				echo "\n\n" ;			}			if($is_change == true)					file_put_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt',$messagestr) ;			return true ;		}	}		public function changeVersion()	{		$ver =  '' ;//当前本地开发环境版本		$rootdir = realpath(__DIR__.DIRECTORY_SEPARATOR."..").DIRECTORY_SEPARATOR ;		$messagestr = file_get_contents($rootdir.'emulation'. DIRECTORY_SEPARATOR .'message.txt') ;		$message = returnLines($messagestr) ;		foreach($message as $key => $value)		{			$temp = preg_split("/[\s\t]/",$value,2) ;			if($temp[0] == 'version')				$ver = $temp[1] ;			else				continue ;		}		if($this->version!=$ver && $this->is_upgrade==true)		{			$messagestr = file_get_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt') ;			$messagestr = str_replace($ver,$this->version,$messagestr) ;			file_put_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt',$messagestr) ;		}	}		public function updateLocal() 	{		$rootdir = realpath(__DIR__.DIRECTORY_SEPARATOR."..").DIRECTORY_SEPARATOR ;		$url = UPDATA_TOOL_URL."?os=" ;		if(IsWindows() === false)			$url.='linux&action=list';		else			$url.='windows&action=list';		$downloadpath=$rootdir.'tmp'.DIRECTORY_SEPARATOR.'download'.DIRECTORY_SEPARATOR;		$filestr = file_get_contents($url,false,$this->http_proxy) ;		if($filestr == false)		{			echo "\nupgrade unsuccessfully,please chick your network\n";			return false ;		}		$files = explode("\n",$filestr);		foreach($files as &$file)		{			$file = preg_split("/[\s\t]/",trim($file)) ;			array_push($file,0) ;		}		foreach($files as &$file)		{			if($file[1] == 2)				$file[5] = 2 ;			else if((is_file($rootdir.$file[0]) == false || md5_file($rootdir.$file[0])!=$file[2]) && $file[1]==3)				$file[5] = 4 ;			else if((is_file($rootdir.$file[0]) == false || md5_file($rootdir.$file[0])!=$file[2]) && $file[1]==5)				$file[5] = 6 ;			else if((is_file($rootdir.$file[0]) == false || md5_file($rootdir.$file[0])!=$file[2]) && $file[1]==7)				$file[5] = 7 ;			else if(is_file($rootdir.$file[0]) == false || md5_file($rootdir.$file[0])!=$file[2])				$file[5] = 1 ;			else 				continue ;		}		$is_succ = true ;		foreach($files as $file)		{			if($file[5]==1 || $file[5]==4 || $file[5]==6 || $file[5]==7)			{				$str = file_get_contents($file[3],false,$this->http_proxy) ; 				$i = 0 ;				while(md5($str) != $file[2] && $i < 3)				{					echo "download file $file[0] failed,Re-download..." ;					sleep(1) ;					$str = file_get_contents($file[3],false,$this->http_proxy) ;					$i ++ ;				}				if($i >= 3)				{					echo "download file $file[0] failed" ;					$is_succ = false ;					break ;				}				$dirn=dirname($downloadpath.$file[0]);				if(is_dir($dirn)==false)					mkdir_r($dirn);				file_put_contents($downloadpath.$file[0],$str);				if(filesize($downloadpath.$file[0])!=$file[4])				{					$is_succ = false ;					break ;				}				echo 'downloaded '.$downloadpath.$file[0].' '.$file[4]." bytes\n";			}		}		if($is_succ == false)		{			remove_dir($downloadpath);			echo "\nupgrade unsuccessfully\n";			return false;		}		echo "\ndownload successfully\n";		foreach($files as $file)		{			if($file[5] == 2)			{				if(is_file($rootdir.$file[0]) == true)				{					echo "remove $file[0] \n" ;					unlink($rootdir.$file[0]) ;				}			}			else if($file[5] == 4)  //配置文件需要更新或者是init.cmd文件需要更新			{				$dirn=dirname($rootdir.$file[0]);				if(is_dir($dirn)==false)					mkdir_r($dirn);				if($file[0] == "init.cmd")					copy($downloadpath.$file[0],$rootdir.$file[0].'.new');				else				{					if(is_file($rootdir.$file[0]) == true)						copy($rootdir.$file[0],$rootdir.$file[0].".old") ;					copy($downloadpath.$file[0],$rootdir.$file[0]);				}				unlink($downloadpath.$file[0]) ;			}			else if($file[5] == 6)//vhost 文件需要更新,vhost文件更新时会使应用的默认版本更改			{				$dirn=dirname($rootdir.$file[0]);				if(is_dir($dirn)==false)					mkdir_r($dirn);				@remove_dir($dirn.DIRECTORY_SEPARATOR.'vhost') ;				mkdir($dirn.DIRECTORY_SEPARATOR.'vhost') ;				copy($rootdir.$file[0],$rootdir.$file[0].".old") ;				copy($downloadpath.$file[0],$rootdir.$file[0]);				unlink($downloadpath.$file[0]) ;			}			else if($file[5] == 7)//下载更新安装包之后需要解压。			{				$root_dir = realpath(__DIR__."/..") ;				shell_exec(' "'.$root_dir.'/bin/other/7-Zip/7z.exe" x "'.$root_dir.'/tmp/download/'.$file[0].'" -o"'.$root_dir.'/tmp/download"' ) ;				unlink($downloadpath.$file[0]) ;			}			else				continue ;		}		//remove_dir($downloadpath);		echo "\nupgraded successfully\n";		return true ;	}	}class SVN_SAE{	public $username = "" ;	public $password = "" ;		public function __construct()	{//		$this->username = getMessage("username") ;//		$this->password = getMessage("password") ;//		$this->set_parameter() ;	}		public function set_parameter()	{		svn_auth_set_parameter(SVN_AUTH_PARAM_DEFAULT_USERNAME, $this->username);		svn_auth_set_parameter(SVN_AUTH_PARAM_DEFAULT_PASSWORD,$this->password);		svn_auth_set_parameter(PHP_SVN_AUTH_PARAM_IGNORE_SSL_VERIFY_ERRORS, true);	}		public function chickout($repos , $targetpath )	{		return svn_checkout($repos,$targetpath) ;	}		public function add($file)	{		return svn_add(realpath($file)) ;	}		public function addall($path) 	{		$addfile = array() ;		$stat = svn_status($path) ;		if($stat === false)			return false ;		foreach($stat as $value)		{			if($value['text_status'] == SVN_WC_STATUS_UNVERSIONED && basename($value['path'])!='.appconfig')			{				if($this->add($value['path']) == false)					return false ;				array_push($addfile,$value['path']) ;			}		}		return $addfile ;	}		public function get_addall($path)	{		$addfile = array() ;		$stat = svn_status($path) ;		if($stat === false)			return false ;		foreach($stat as $value)		{			if($value['text_status'] == SVN_WC_STATUS_UNVERSIONED && basename($value['path'])!='.appconfig' )			{				array_push($addfile,$value['path']) ;			}		}		return $addfile ;	}		public function del($file) 	{		return svn_delete(realpath($file),true) ;	}		public function delall($path)	{		$delfile = array() ;		$stat = svn_status($path) ;		if($stat === false)			return false ;		foreach($stat as $value)		{			if($value['text_status'] == SVN_WC_STATUS_MISSING)			{				if(is_dir($value['path']) == false)					touch($value['path']) ;				else 					mkdir($value['path']) ;				if($this->del($value['path']) == false)				{					@unlink($value['path']) ;					return false ;				}				array_push($delfile,$value['path']) ;			}		}		return $delfile ;	}		public function show_delall($path)	{		$delfile = array() ;		$stat = svn_status($path) ;		if($stat === false)			return false ;		foreach($stat as $value)		{			if($value['text_status'] == SVN_WC_STATUS_MISSING)			{				array_push($delfile,$value['path']) ;			}		}		return $delfile ;	}		public function status($path)	{		$return_stat = array() ;		$return_stat['add'] = array() ;		$return_stat['del'] = array() ;		$return_stat['change'] = array() ;		$return_stat['ndel'] = array() ;		$return_stat['nadd'] = array() ;		$stat = svn_status(realpath($path)) ;		if($stat === false)			return false ;		foreach($stat as $value)		{			if($value['text_status'] == SVN_WC_STATUS_DELETED  && basename($value['path'])!='.appconfig')				array_push($return_stat['del'],$value['path']) ;			else if($value['text_status'] == SVN_WC_STATUS_ADDED && basename($value['path'])!='.appconfig')				array_push($return_stat['add'],$value['path']) ;			else if($value['text_status'] == SVN_WC_STATUS_MODIFIED && basename($value['path'])!='.appconfig')				array_push($return_stat['change'],$value['path']) ;			else if($value['text_status'] == SVN_WC_STATUS_MISSING && basename($value['path'])!='.appconfig')				array_push($return_stat['ndel'],$value['path']) ;			else if($value['text_status'] == SVN_WC_STATUS_UNVERSIONED && basename($value['path'])!='.appconfig')				array_push($return_stat['nadd'],$value['path']) ;			else				continue ;		}		return $return_stat ;	}		public function update($path)	{		return svn_update(realpath($path)) ;	}		public function commit($log,$path) 	{		return svn_commit($log,array(realpath($path))) ;	}		public function chick_username()	{		return $this->username == '' ? false : true ;	}		function chick_password()	{		return $this->password=='' ? false : true ;	}		function set_username($username)	{		$this->username = $username ;	}		function set_password($password)	{		$this->password = $password ;	}}class Operate_Host{	private $host_path   = "C:/Windows/System32/drivers/etc/hosts" ;	//private $host_path   = "F:/sae/hosts" ;	public function __construct()	{}		public function addhost($ip,$host)	{		$hosts = $this->gethost() ;		$key = $this->findhost($ip,$host,$hosts) ;		if($key == false || $key[0] == '#')		{			$content = file_get_contents($this->host_path) ;			$add = $ip."   ".$host ;			$content = $content."\n".$add ;			file_put_contents($this->host_path,$content) ;			return true ;		}		return false ;	}		public function delhost($ip,$host) 	{		$hosts = $this->gethost() ;		$key = $this->findhost($ip,$host,$hosts) ;		if($key != false && $key[0] != '#')		{			$farray=file($this->host_path);			$newcont = "" ;			foreach($farray as $num => $value)			{				if(strstr($value,$key) || trim($value)=="")					continue ;				else					$newcont .= $value ;			}			$fp = fopen($this->host_path,"w") ;			fputs($fp,$newcont) ;			fclose($fp) ;			return true ;		}		return false ;	}		private function findhost($ip,$host,&$hosts)	{		foreach($hosts as $key => $value)		{			if(trim($ip) == $value["ip"] && trim($host)==$value['host'])				return $key ;		}		return false ;	}		private function gethost()	{		$content = file_get_contents($this->host_path) ;		$lines = returnLines($content) ;		$hosts = array() ;		foreach($lines as $line)		{			$temp = trim($line," #") ;			$line = trim($line) ;			$ip_port = preg_split("/[\s\t]/",$temp,2) ;			$ip = trim($ip_port[0]) ;			$port = trim($ip_port[1]) ;			if(!strstr($port,' ') && strstr($port,$this->confs["domain"].'.com') && strstr($ip,'127.0.0.1'))			{				$hosts[$line] = array() ;				$hosts[$line]["ip"] = $ip ;				$hosts[$line]["host"] = $port ;			}		}		return $hosts ;	}}class Loacl_SAE{	public $appnum             =  APPNUM ;      //本地开发环境允许穿件的最多应用个数	public $confs              =  array();      //本地开发环境配置信息保存数组	public $local_env          =  array() ;     //本地开发环境的信息	public $app_dbnum          =  array() ;     //appname与对应的dbnum	public $http_proxy         =  NULL ;          //用户代理信息	public $rootdir            =  "" ;          //apache的DocumentRoot目录	public $temp_dir           =  "" ;          //本地开发环境临时目录	public $SAEStorage         =  "" ;          // storage存放路径	public $vhostdir           =  "" ;          //vhost存放的路径	public $open_basedir       =  "" ;          //指定用户可以操作的路径	public $disable_functions  =  "" ;          //禁用的函数	public $disable_classes    =  "" ;          //禁用的类	public $old_http_port      =  "" ;          //上次启动apache是httpd的端口号	public $old_https_port     =  "" ;          //上次启动apache是https的端口号	public $old_domain         =  "" ;          //上次启动apache时的domain	public $now_app_name       =  "" ;          //当前选择的应用	public $rundir             =  array() ;     //apache,redis,php软件包的跟路径	public $redis              =  false ;	public $apache_sae         =  false ;	public $redis_sae          =  false ;	public $update_sae         =  false ;	public $operate_host       =  false ;	public $svn_sae            =  false ;	public $svn_operat_app     =  array() ;	public $system_bits        =  NULL ;	public function __construct()	{		$this->confs = $this->analyze_conf_file() ;		if(!isset($this->confs["DocumentRoot"]) || $this->confs["DocumentRoot"] == "error")		{			$this->shutdown_function("DocumentRoot 配置错误，请检查...") ;		}		if($this->confs['proxy_host']!='' && $this->confs['proxy_port']!='')		{			$this->http_proxy = stringToProxyContext($this->confs['proxy_host'],$this->confs['proxy_port'],$this->confs['proxy_username'],$this->confs['proxy_password']) ;		}		$this->rootdir = $this->confs["DocumentRoot"] ;		$this->SAEStorage = realpath(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'storage') ;				$this->temp_dir = sys_get_temp_dir() ;		$this->temp_dir = trim($this->temp_dir) ;		if(stristr($this->temp_dir,' '))		{			$this->shutdown_function("您的临时路径中含有空格字符，请更换临时文件目录，确保临时文件目录中不包含空格字符") ;		}				$this->open_basedir = '"'.__DIR__.'\\;'.$this->rootdir."\\;".$_SERVER['SystemRoot'].DIRECTORY_SEPARATOR.'fonts\\;'.$this->SAEStorage.'\\;C:\\Windows\\;C:\\Users\\;'.$this->temp_dir.'\\"' ;				$this->old_http_port = getMessage("http_port") ;		$this->old_https_port = getMessage("https_port") ;		$this->old_domain    = getMessage("domain") ;				$this->rundir = array('apache'/**,'mysql'**/,'other','php','redis');		$argv = realpath(__dir__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR.'bin');		$this->rundir = array_combine($this->rundir, glob($argv.DIRECTORY_SEPARATOR.'*', GLOB_MARK  )  );		$this->vhostdir = $this->rundir['apache'].'conf'.DIRECTORY_SEPARATOR.'vhost' ;				$this->apache_sae = new Apache_SAE($this->rundir['apache'],$this->rundir['php'],$this->confs["DocumentRoot"],$this->confs['http_port'],$this->confs['https_port']) ;		$this->redis_sae  = new Redis_SAE($this->rundir['redis']) ;		$this->update_sae = new Update_SAE($this->http_proxy) ;		$this->operate_host = new Operate_Host() ;		$this->svn_sae      = new SVN_SAE() ; 				$this->local_env          =  array() ;		$this->app_dbnum          =  array() ;				$this->system_bits        =  system_bits() ;		$passcmd = '' ;		if($this->system_bits == '32') 			$passcmd = "@echo off\nset SAE_PATH=%~dp0\n\"%SAE_PATH%..\\bin\\other\\editv22\\EditV32.exe\" -m pass\necho %pass%" ;		else			$passcmd = "@echo off\nset SAE_PATH=%~dp0\n\"%%SAE_PATH%..\\bin\\other\\editv22\\EditV64.exe\" -m pass\necho %pass%" ;					file_put_contents(__DIR__."/password.cmd",$passcmd) ;	}		public function php_config()	{		$phpconf = file_get_contents($this->rundir['php'].'php.sae');		$phpconf = str_replace(array('extension_dir = "./ext"','disable_functions = ','disable_classes = ','; open_basedir =','auto_prepend_file =',';session.save_path = "[tmp]"',';xhprof.output_dir=','extension_dir = "./"'),		array('extension_dir = "'.$this->rundir['php'].'ext"','disable_functions = '.$this->disable_functions,'disable_classes = '.$this->disable_classes,'; open_basedir = '.$this->open_basedir,'auto_prepend_file = '.'"'.__DIR__.DIRECTORY_SEPARATOR.'loadsae.php"','session.save_path = "'.$this->temp_dir.'"','xhprof.output_dir="'.$this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xhprof"','extension_dir = "'.$this->rundir['php'].'"'),$phpconf);		if($this->confs['open_xdebug'] == '1')		{			$phpconf .= "\n[Xdebug]\n" ;			$phpconf .= 'zend_extension="'.$this->rundir['php'].'php_xdebug.dll"'."\n" ;			$phpconf .= "xdebug.auto_trace=1\n" ;			$phpconf .= "xdebug.collect_params=1\n" ;			$phpconf .= "xdebug.collect_return=1\n" ;			$phpconf .= "xdebug.profiler_enable=1\n" ;			$phpconf .= "xdebug.overload_var_dump = 1\n" ;			$phpconf .= "xdebug.var_display_max_children = 5120\n" ;			$phpconf .= "xdebug.var_display_max_data = 10240\n" ;			$phpconf .= 'xdebug.trace_output_dir="'.$this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xdebug"'."\n" ;			$phpconf .= 'xdebug.profiler_output_dir="'.$this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xdebug"'."\n" ;		}		file_put_contents($this->rundir['php'].'php.ini',$phpconf,LOCK_EX);	}		public function mysql_config()	{		$mysqlconf = file_get_contents(__DIR__.DIRECTORY_SEPARATOR.'mysqlconf'.DIRECTORY_SEPARATOR.'mysql.sae') ;		$mysqlconf = str_replace(array('[$user]','[$pass]','[$host]','[$port]','[$DOCUMENT_ROOT]','[$http_port]','[$https_port]','[$redis_host]','[$redis_port]'),array($this->confs["mysql_user"],$this->confs["mysql_pass"],$this->confs["mysql_host"],$this->confs["mysql_port"],$this->confs["DocumentRoot"],$this->confs["http_port"],$this->confs["https_port"],REDIS_IP,$this->confs["redis_port"]),$mysqlconf) ;		file_put_contents(__DIR__.DIRECTORY_SEPARATOR.'mysqlconf'.DIRECTORY_SEPARATOR.'mysql.php',$mysqlconf,LOCK_EX) ;	}		public function get_disable_function_class()	{		$this->disable_functions = getMessage('disable_functions') ;		$this->disable_classes = getMessage('disable_classes') ;	}		public function init_redis()	{		//$this->redis = new Predis\Client();		$this->redis = new Redis() ;		while(!$this->redis->connect(REDIS_IP,$this->confs["redis_port"]) )		{			echo REDIS_IP."  ".$this->confs["redis_port"] ;			echo iconv('UTF-8','GBK','redis 连接错误，请检查redis服务是否开启，正在尝试从新连接...').PHP_EOL ;			sleep(2) ;		}		//启动本地环境时先清除redis中的所有数据		$this->redis->flushAll() ;	}		public function change_username()	{		$stdin = fopen("php://stdin", "r");			echo "username:" ;		$user = fread($stdin, 1024) ;		$this->svn_sae->set_username(trim($user)) ;		fclose($stdin) ;	}		public function change_password()	{		$temp = exec('chcp') ;		$ttt = explode(':',$temp) ;		$chcp = trim($ttt[1]) ;		$temp = exec('graftabl') ;		$ttt = explode(':',$temp) ;		$graftabl = trim($ttt[1]) ;		exec('chcp 437 >nul') ;		exec('graftabl 936 >nul') ;				$command = '"'.__DIR__.'/password.cmd"' ;		echo "password:" ;		$pwd = exec($command) ;		$this->svn_sae->set_password(trim($pwd)) ;		exec("chcp $chcp >nul") ;		exec("graftabl $graftabl >nul") ;	}		public function change_user()	{		$this->change_username() ;		$this->change_password() ;		//$this->svn_sae->set_parameter() ;		return $this->get_token() ;	}		public function set_user_pass()	{		if($this->svn_sae->chick_username() == false)		{			$this->change_user() ;		}		if($this->svn_sae->chick_password() == false)		{			$this->change_password() ;			//$this->svn_sae->set_parameter() ;			//$this->get_token() ;		}	}		public function get_applist(&$retstr)	{		$token = $this->get_token() ;		if($token == false)		{			return false ;		}		$json=new Services_JSON(SERVICES_JSON_LOOSE_TYPE);		$url=SAE_CODE_DEPOSITION_ADDRESS.'?action=applist&email='.$this->svn_sae->username.'&cookie='.$token;		$ret=file_get_contents($url,false,$this->http_proxy);		if($ret == false)		{			echo "fail to get app list \n" ;			return false ;		}		$retstr=$json->decode($ret);		if(is_array($retstr)==false || array_key_exists('data',$retstr)==false)		{			echo "app list format error \n" ;			return false ;		}		return true ;	}		public function get_token()	{		$this->set_user_pass() ;		$token=file_get_contents(SAE_CODE_DEPOSITION_ADDRESS.'?action=auth&email='.$this->svn_sae->username.'&password='.urlencode($this->svn_sae->password),false,$this->http_proxy);		if($token == false)		{			echo iconv('UTF-8','GBK',"请检查您的网络是否是可以连通\n") ;			return false ;		}		$tarray=explode("\n",$token);		if(count($tarray)>=2||$token=='')		{			echo iconv('UTF-8','GBK',"您的用户名或者密码不正确\n") ;			/////////////////////////////////////////////将username和password重启			$this->svn_sae->password = "" ;			$this->svn_sae->username = "" ;			return false ;		}		$this->svn_sae->set_parameter() ;		return $token ;	}		public function chickoutall()	{		$retstr = NULL ;		if($this->get_applist($retstr) == false)			return false ;		foreach($retstr['data'] as $key => $mess)		{			if($this->chickoutapp($key,$mess) == false)				return false ;		}		return true ;	}		public function chickoutapp($appname,$mess)	{		if(is_array($mess)==false || array_key_exists('versions',$mess)==false)			return false ;		if(array_key_exists($appname,$this->app_dbnum) == false)		{			$this->create_app($appname) ;			$this->addhost($appname) ;		}		$this->now_app_name = $appname ;		foreach($mess['versions'] as $version => $value)		{			$this->chickout_appversion($appname,$version) ;		}		if($version['is_default'] == 1 && $version['is_default']!=$this->local_env[$this->app_dbnum[$appname]]['default'])			$this->set_default_varsion($version) ;		return true ;	}		public function chickout($appname)	{		$retstr = NULL ;		if($this->get_applist($retstr) === false)			return false ;		if(array_key_exists($appname,$retstr['data']) == false)		{			echo iconv('UTF-8','GBK',"你的线上环境没有".$appname."这个应用\n") ;			return false ;		}		/*foreach($retstr['data'] as $key => $mess)		{			if($appname == $key)			{				return $this->chickoutapp($appname,$mess) ;			}		}*/		return $this->chickoutapp($appname,$retstr['data'][$appname]) ;	}		public function chickout_version($appname,$version)	{		$retstr = NULL ;		if($this->get_applist($retstr) == false)			return false ;		if(array_key_exists($appname,$retstr['data']) == false)		{			echo iconv('UTF-8','GBK',"你的线上环境没有".$appname."这个应用\n") ;			return false ;		}		if(array_key_exists($appname,$this->app_dbnum) == false)		{			$this->create_app($appname) ;			$this->addhost($appname) ;		}		$this->now_app_name = $appname ;		if(array_key_exists($version,$retstr['data'][$appname]["versions"]) == false)		{			echo iconv('UTF-8','GBK',"你的线上环境没有".$version."这个版本\n") ;			return false ;		}		return $this->chickout_appversion($appname,$version) ;	}		public function chickout_appversion($appname,$version)	{		if(in_array($version,$this->local_env[$this->app_dbnum[$appname]]['version']) == false)		{			$this->create_version($version) ;			$this->addhost($appname,$version) ;			if(file_exists(realpath($this->rootdir.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR.".appconfig")))				unlink(realpath($this->rootdir.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR.".appconfig")) ;			if(file_exists(realpath($this->rootdir.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR."config.yaml")))				unlink(realpath($this->rootdir.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR."config.yaml")) ;			if(file_exists(realpath($this->rootdir.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR."index.php")))				unlink(realpath($this->rootdir.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR."index.php")) ;		}		else		{			echo iconv('UTF-8','GBK',$appname."的".$version."已经已经存在，不能再次下载代码，如果需要下载该版本代码，需要想将本地开发环境中的这个版本删除\n") ;			return false ;		}		echo iconv('UTF-8','GBK','下载'.$appname."的".$version."版本代码\n") ;		if($this->svn_sae->chickout(SAE_SVN_HTTPS.'/'.$appname.'/'.$version,realpath($this->rootdir.'/'.$appname.'/'.$version)) == false)		{			echo iconv('UTF-8','GBK','下载'.$appname."的".$version."版本代码失败\n") ;			//$this->delete_version($version) ;			//$this->delhost($appname,$version) ;			return false ;		}		//svn_cleanup(SAE_SVN_HTTPS.'/'.$appname.'/'.$version) ;		echo iconv('UTF-8','GBK','下载'.$appname."的".$version."版本代码成功\n\n") ;		if(array_key_exists($appname,$this->svn_operat_app) == false)			$this->svn_operat_app[$appname] = array() ;		$this->svn_operat_app[$appname][$version] = true ;		//将appconfig更新		$this->parsedToConfig(realpath($this->rootdir.'/'.$appname.'/'.$version),$appname,$version) ;		return true ;	}		public function add($files)	{		foreach($files as $file)		{			if($this->svn_sae->add($file) === false)				return false ;		}		return true ;	}		public function addall($path)	{		return $this->svn_sae->addall($path) ;	}		public function get_addall($verpath)	{		return $this->svn_sae->get_addall($verpath) ;	}		public function delete($files)	{		foreach($files as $file)		{			if($this->svn_sae->del($file) === false)				return false ;		}		return true ;	}		public function delall($path)	{		return $this->svn_sae->delall($path) ;	}		public function show_delall($path)	{		return $this->svn_sae->show_delall($path) ;	}		public function status($path)	{		$path = realpath($path) ;		if(!$path)			return false ;		return $this->svn_sae->status($path) ;	}		public function update($path)	{		if($this->get_token() == false)			return false ;		return $this->svn_sae->update($path) ;	}		public function show_status($stat)	{		foreach($stat as $key => $value)		{			foreach($value as $file)			{				echo $key."\t\t\t".$file."\n" ;			}		}	}		public function commit($log,$path)	{		if($this->get_token() == false)			return false ;		return $this->svn_sae->commit($log,$path) ;	}		public function chick_command_files(&$files,$path)	{		foreach($files as $key => $file)		{			if(file_exists($path.'/'.$file) == false)				return $file ;			else				$files[$key] = $path.'/'.$file ;		}		return true ;	}		//这个命令并不会去这些文件是否存在于本地开发环境中	public function get_command_version_files($command,&$version,&$coms)	{		$defver = $this->local_env[$this->app_dbnum[$this->now_app_name]]['default'] ;		$version = NULL ;		for($i=1; $i<count($command); ++$i)		{			if($command[$i][0]=='-' && $command[$i][1]=='v')			{				$temp = explode('=',trim($command[$i])) ;				$version = $temp[1] ;			}			else			{				array_push($coms,$command[$i]) ;			}		}		if($version == NULL)			$version = $defver ;	}		//添加当前所有应用的host	public function openhost()	{		foreach($this->app_dbnum as $appname => $num)		{			$this->addhost($appname) ;		}	}		//删除当前所有应用的host	public function closehost() 	{		foreach($this->app_dbnum as $appname => $num)		{			$this->delhost($appname) ;		}	}		//如果$version==false，添加当前应用各个版本的host，包括默认版本对应的host	//如果$version为需要添加的版本号是，就是添加一个版本的host	//$local_env	//$app_dbnum	//$now_app_name	public function addhost($now_app_name,$version=false)	{		if($now_app_name == "")			return false ;		if($version == false)		{			$num = $this->app_dbnum[$now_app_name] ;			foreach($this->local_env[$num]['version'] as $value)			{				$this->addhost($now_app_name,$value) ;			}			$this->operate_host->addhost('127.0.0.1',$now_app_name.'.'.$this->confs["domain"].'.com') ; //添加默认版本的host		}		else		{			$this->operate_host->addhost('127.0.0.1',$version.'.'.$now_app_name.'.'.$this->confs["domain"].'.com') ;		}		return true ;	}		//同上	public function delhost($now_app_name,$version=false)	{		if($now_app_name == "")			return false ;		if($version ==  false)		{			$num = $this->app_dbnum[$now_app_name] ;			foreach($this->local_env[$num]['version'] as $value)			{				$this->delhost($now_app_name,$value) ;			}			$this->operate_host->delhost('127.0.0.1',$now_app_name.'.'.$this->confs["domain"].'.com') ; //删除默认版本的host		}		else		{			$this->operate_host->delhost('127.0.0.1',$version.'.'.$now_app_name.'.'.$this->confs["domain"].'.com') ;		}		return true ;	}		public function local_upgrade()	{		$ret = $this->update_sae->checkLocalUpdate($link) ;		if($this->confs['autoupgrade'] == '0' && $ret != false)		{			echo iconv('UTF-8','GBK',"本地开发环境有新版本，是否升级？y/n: ") ;			$stdin = fopen("php://stdin", "rb");			$readcom = fread($stdin,1024) ;			$readcom = substr($readcom,0,1) ;			if($readcom=='y' || $readcom=='Y')				$this->update_sae->is_upgrade = true ;			else 				$this->update_sae->is_upgrade = true ;			fclose($stdin) ;		}		else if($this->confs['autoupgrade'] == '1' && $ret != false)		{			$this->update_sae->is_upgrade = true ;		}		else			$this->update_sae->is_upgrade = false ;		$this->update_sae->uploadDisabled() ;		if($this->update_sae->is_upgrade)		{			echo "local environment ".$ret." available, start upgrading\n\n" ;			if($this->update_sae->updateLocal())			{				if($this->apache_sae->test_SAE_Local_Apache_is_Run())				{					$this->stop_apache() ;				}				$this->update_sae->changeVersion() ;				$this->shutdown_function("本地开发环境已经升级完成，你需要重新启动本地开发环境来使升级生效") ;			}			else				echo iconv('UTF-8','GBK',"本地开发环境升级失败，您可以重启本地开发环境重新进行升级\n") ;		}	}		public function chick_config()	{		if(!is_file($this->rundir['php'].'php.sae'))			$this->shutdown_function("SAE PHP仿真配置文件错误或失效，无法继续！") ;		if(!is_file($this->rundir['apache'].'conf'.DIRECTORY_SEPARATOR.'httpd.sae'))			$this->shutdown_function("Apache高性能配置文件错误或失效，无法继续！") ;		if(!is_file($this->rundir['redis'].'redis.sae'))			$this->shutdown_function("SAE redis配置文件错误或失效，无法继续！") ;	}		//检测apache和redis的端口号是否被占	public function chick_local_port()	{		if($this->chickPort($this->confs["http_port"]))			$this->shutdown_function("http 端口被占,被占的端口号是".$this->confs["http_port"]." ，请您修改http的端口号或者查看那个进程占了".$this->confs['http_port']."端口，将这个进程杀掉。") ;				if($this->chickPort($this->confs["https_port"]))			$this->shutdown_function("https 端口被占,被占的端口号是".$this->confs["https_port"]." ，请您修改https的端口号或者查看那个进程占了".$this->confs['https_port']."端口，将这个进程杀掉。") ;					if($this->chickPort($this->confs["redis_port"]))			$this->shutdown_function("redis 端口被占,被占的端口号是".$this->confs["redis_port"]." ，请您修改redis的端口号或者查看那个进程占了".$this->confs['redis_port']."端口，将这个进程杀掉。也有可能是您上次在关闭redis之后，redis的端口号没能及时释放，您可以稍等再重启本地开发环境") ;	}		public function chick_apache_port()	{		if($this->chickPort($this->confs["http_port"]))		{			echo "http 端口被占,被占的端口号是".$this->confs["http_port"]." ，请您修改http的端口号或者查看那个进程占了".$this->confs['http_port']."端口，将这个进程杀掉。\n" ;			return false ;		}				if($this->chickPort($this->confs["https_port"]))		{			echo "https 端口被占,被占的端口号是".$this->confs["https_port"]." ，请您修改https的端口号或者查看那个进程占了".$this->confs['https_port']."端口，将这个进程杀掉。\n" ;			return false ;		}		return true ;	}		public function start_apache()	{		$this->apache_sae->apache_dir_is_right() ;		$is_run = $this->apache_sae->test_SAE_Local_Apache_is_Run() ;		if($is_run === true)		{			$this->apache_sae->stop() ;			while($this->apache_sae->test_SAE_Local_Apache_is_Run() || $this->chickPort($this->old_http_port) || $this->chickPort($this->old_https_port))			{				sleep(1) ;			}		}		$this->chick_local_port() ;					$this->php_config() ;		$this->mysql_config() ;		$this->apache_sae->config() ;		if( $this->old_http_port != $this->confs["http_port"] )		{			$this->apache_sae->change_vhost_port($this->old_http_port,$this->confs["http_port"]) ;			setMessage('http_port',$this->old_http_port,$this->confs["http_port"]) ;		}		if($this->old_https_port != $this->confs["https_port"])		{			$this->apache_sae->change_vhost_port($this->old_https_port,$this->confs["https_port"]) ;			setMessage('https_port',$this->old_https_port,$this->confs["https_port"]) ;		}		if($this->old_domain != $this->confs['domain'])		{			$this->apache_sae->change_domain($this->confs['domain']) ;			setMessage('domain',$this->old_domain,$this->confs["domain"]) ;		}				if($this->apache_sae->apache_is_run_or_install(false) === false)			$this->apache_sae->install() ;		echo iconv('UTF-8','GBK',"正在启动apache服务...\n") ;		if($this->apache_sae->apache_is_run_or_install() == true)			$this->apache_sae->restart() ;		else			$this->apache_sae->start() ;		$i =0 ; 		while((!$this->apache_sae->test_SAE_Local_Apache_is_Run()) || (!$this->chickPort($this->confs["http_port"])))		{			if($i > 60)				$this->shutdown_function("apache启动失败") ;			sleep(1) ;			$i++ ;		}		echo iconv('UTF-8','GBK',"apache服务启动成功\n\n") ;			}		public function start_apache2()	{		$this->php_config() ;		$this->mysql_config() ;		$this->apache_sae->config() ;		$this->apache_sae->start() ;		$i =0 ; 		while((!$this->apache_sae->test_SAE_Local_Apache_is_Run()) || (!$this->chickPort($this->confs["http_port"])))		{			if($i > 60)			{				return false ;			}			sleep(1) ;			$i++ ;		}		return true ;	}			public function stop_apache()	{		echo iconv('UTF-8','GBK','正在停止apache服务')."\n" ;		//这里需要检查SAE_Apache_Local服务是否开启，如果没有开启就直接返回。		//这里判断原因是：如果用户调用了apachestop命令将SAE_Apache_Local服务停止，而启动本机上另外的一个apache服务，端口号与		//本地开发环境相同，这是就会登上90秒才能推出，并且会打印错误信息。		if(!$this->apache_sae->test_SAE_Local_Apache_is_Run())		{			return true ;		}		$this->apache_sae->stop() ;		$i = 0 ;		while($this->chickPort($this->confs["http_port"]) && $i<90)		{			sleep(1) ;			$i++ ;		}		if($i < 90)			{			echo iconv('UTF-8','GBK','apache服务已经停止')."\n" ;			return true ;		}		else		{			echo iconv('UTF-8','GBK','停止apache服务失败，您可以手动停止apache服务')."\n" ;			return false ;		}	}		public function restart_apache()	{		$this->php_config() ;		$this->mysql_config() ;		$this->apache_sae->config() ;		$this->apache_sae->restart() ;		$i =0 ; 		while((!$this->apache_sae->test_SAE_Local_Apache_is_Run()) || (!$this->chickPort($this->confs["http_port"])))		{			if($i > 60)				return false ;			sleep(1) ;			$i++ ;		}		return true ;	}		public function uninstall_apache()	{		$this->apache_sae->uninstall() ;	}		public function start_redis()	{		$this->redis_sae->config() ;	}		public function stop_redis()	{		echo iconv('UTF-8','GBK',"正在停止redis服务...\n") ;		$this->redis->close() ;		$this->redis_sae->stop() ;		$i = 0 ;		while($this->chickPort($this->confs["redis_port"]) && $i<90)		{			sleep(1) ;			$i++ ;		}		if($i < 90)			{			echo iconv('UTF-8','GBK',"redis服务已停止\n\n") ;			return true ;		}		else		{			echo iconv('UTF-8','GBK',"停止redis服务停止失败，原因是redis的端口没有释放，您可以稍等一下，让操作系统释放掉redis端口号后在启动本地开发环境\n\n") ;			return false ;		}	}		public function start_local_env()	{		echo iconv('UTF-8','GBK',"正在启动本地环境...\n");		//删除临时文件		if(file_exists($this->SAEStorage.DIRECTORY_SEPARATOR.'tempstorage'))			remove_dir($this->SAEStorage.DIRECTORY_SEPARATOR.'tempstorage') ;		if(file_exists($this->SAEStorage.DIRECTORY_SEPARATOR.'tempstorage') === false)			mkdir($this->SAEStorage.DIRECTORY_SEPARATOR.'tempstorage') ;		if(file_exists($this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xdebug') === false)			mkdir($this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xdebug') ;		if(file_exists($this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xhprof') === false)			mkdir($this->SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.'SAE_xhprof') ;					$dirname = get_dirnames($this->confs["DocumentRoot"]) ;		if($dirname === false)		{			$this->shutdown_function("不能找到主文档树的根目录，请检查本地环境中的DocumentRoot参数配置是否正确") ;		}		if(count($dirname) > APPNUM )		{			$this->shutdown_function("您的应用数多于".APPNUM."个，请删除您部分应用，保证您的应用数小于".APPNUM."个。") ;		}				//初始化redis		$this->init_redis() ;				$this->get_current_apps() ;		$this->openhost() ;				echo "\n".iconv('UTF-8','GBK','本地环境启动完成') ;		echo "\n".iconv('UTF-8','GBK','SAE本地模拟开发环境启动成功') ;	}		public function analyze_conf_file()	{		$saeconf = file_get_contents(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'sae.conf') ;		if(empty($saeconf))			return array() ;		$lines  = explode("\n",$saeconf) ;		$confs  = array() ;		for($i=0;$i<count($lines);$i++)		{			$oneconf = preg_split("/[\s\t]/",$lines[$i],2) ;			if(!is_array($oneconf) || count($oneconf)!=2 )				continue ;			$value = trim($oneconf[1]) ;			switch($oneconf[0])			{			case "DocumentRoot":				if(is_dir($value))				{					$confs["DocumentRoot"] = realpath($value) ;				}				else if($value != "")				{					$confs["DocumentRoot"] = "error" ;				}				else					$confs["DocumentRoot"] = realpath(__DIR__.DIRECTORY_SEPARATOR."..".DIRECTORY_SEPARATOR."wwwroot") ;				break ;			case "http_port":				if($value == "")					$confs["http_port"] = "80" ;				else 					$confs["http_port"] = $value ;				break ;			case "https_port":				if($value == "")					$confs["https_port"] = "443" ;				else 					$confs["https_port"] = $value ;				break ;			case "redis_port":				if($value == "")					$confs["redis_port"] = "6379" ;				else 					$confs["redis_port"] = $value ;				break ;			case "domain":				if($value == "")					$confs["domain"] = 'sinaapp' ;				else					$confs["domain"] = $value ;				break ;			case "mysql_user":				if($value !== "")				{					$confs["mysql_user"] = $value ;				}				else					$confs["mysql_user"] = "" ;				break ;			case "mysql_pass" ;				if($value !== "")				{					$confs["mysql_pass"] = $value ;				}				else					$confs["mysql_pass"] = "" ;				break ;			case "mysql_host" ;				if($value !== "")				{					$confs["mysql_host"] = $value ;				}				else					$confs["mysql_host"] = "127.0.0.1" ;				break ;			case "mysql_port" ;				if($value !== "")				{					$confs["mysql_port"] = $value ;				}				else					$confs["mysql_port"] = 3306 ;				break ;			case 'proxy_use':				if($value !== "")				{					$confs["proxy_use"] = $value ;				}				else					$confs["proxy_use"] = "" ;				break ;			case 'proxy_host':				if($value !== "")				{					$confs["proxy_host"] = $value ;				}				else					$confs["proxy_host"] = "" ;				break ;			case 'proxy_port':				if($value !== "")				{					$confs["proxy_port"] = $value ;				}				else					$confs["proxy_port"] = "" ;				break ;			case 'proxy_username':				if($value !== "")				{					$confs["proxy_username"] = $value ;				}				else					$confs["proxy_username"] = "" ;				break ;			case 'proxy_password':				if($value !== "")				{					$confs["proxy_password"] = $value ;				}				else					$confs["proxy_password"] = "" ;				break ;			case 'open_xdebug':				if($value !== "" && $value == '1')					$confs["open_xdebug"] = $value ;				else					$confs["open_xdebug"] = '0' ;				break ;			case 'autoupgrade':				if($value !== "" && $value=='0')					$confs["autoupgrade"] = $value ;				else 					$confs["autoupgrade"] = '1' ;				break ;			default:				break ;			}		}		return $confs ;	}		public function shutdown_function($mess)	{		global $err_message ;		$err_message = $mess ;		register_shutdown_function(function(){			global $err_message ;			//echo iconv('UTF-8','GBK','遇到致命错误！').PHP_EOL;			passthru('msg %username% /time:60 "'.iconv('UTF-8','GBK',"$err_message").'"');		});		echo iconv('UTF-8','GBK',$mess) ;		die("");	}			public function chickPort($port) 	{		$str = rerun('netstat -ano | findstr ".*[0-9]:'.$port.'[^0-9].*[0-9]:[0-9].*"','',$runresources) ;		if($str == "")			return false ;		else			return true ;	}		public function get_current_apps()	{		$SAEStorage = $this->SAEStorage ;		$appnum = APPNUM ;		$vhostdir = $this->vhostdir ;		$wwwroot = $this->confs["DocumentRoot"] ;		//$local_env = & $this->local_env ;		//$app_dbnum = & $this->app_dbnum ;		$insertapp = get_dirnames($wwwroot) ;		$redis = $this->redis ;		while(!$redis)		{			echo iconv('UTF-8','GBK','redis 连接错误，正在尝试从新连接。').PHP_EOL ;			sleep(2) ;			$redis = new Predis\Client();		}		foreach($insertapp as $value)		{			$dbnum = $this->get_dbnum($this->local_env,$appnum) ;			$this->local_env[$dbnum]['appname'] = $value ;			$this->app_dbnum[$value] = $dbnum ;			$redis->select($appnum) ;			//$redis->set($value,$dbnum) ;						//将appname与redis的db对应起来，就是appname这个应用的数据存放在dbnum这个数据库中			$redis->hSet("app-num",$value,$dbnum) ;			if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$value))				mkdir($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$value) ;			if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'tempstorage'.DIRECTORY_SEPARATOR.$value))				mkdir($SAEStorage.DIRECTORY_SEPARATOR.'tempstorage'.DIRECTORY_SEPARATOR.$value) ;			if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$value))				mkdir($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$value) ;			$storage = get_dirnames($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$value) ;			$version = get_dirnames($wwwroot.DIRECTORY_SEPARATOR.$value) ;			foreach($version as $key=>$val)			{				if(!is_numeric($val))					unset($version[$key]) ;			}						//每次启动本地开发环境是都会更新config.yaml。			foreach($version as $vars)			{				$this->parsedToConfig($wwwroot.DIRECTORY_SEPARATOR.$value.DIRECTORY_SEPARATOR.$vars,$value,$vars) ;			}						$this->local_env[$dbnum]['version'] = $version ;			$this->local_env[$dbnum]['storage'] = $storage ;			$this->local_env[$dbnum]['default'] = '' ;						$elems = array() ;			$host_file = $this->get_app_host($value,$vhostdir) ;			if(count($host_file) > 0)			{				foreach($host_file as $key => $va)				{					$elem = $this->split_host_filename($va) ;					$elems[$key] = $elem ;				}			}			$this->more_host($elems,$host_file,$version,$value,$vhostdir) ;			$this->lost_host($elems,$host_file,$version,$value,$vhostdir,$wwwroot) ;			if(count($elems) < 1)				continue ;			$tar = false ;			foreach($elems as $num => $me)			{				if(count($me) == 4)				{					$this->local_env[$dbnum]['default'] = $me[1] ;					$tar = true ;				}			}			if($tar == true)				continue ;			else			{				$temp = $elems[array_rand($elems)] ;				//unlink($vhostdir.DIRECTORY_SEPARATOR.$temp[0].'-'.$temp[1].'-'.$temp[2]) ;				$this->create_vhost_file($temp[1],$value,$vhostdir,$wwwroot,true) ;				$this->local_env[$dbnum]['default'] = $temp[1] ;			}					}		$this->clean_unless_file($this->app_dbnum,$vhostdir) ;		$this->restart_apache() ;	}		function get_dbnum(&$appname,$appnum)	{		if(count($appname) > $appnum)			return -1 ;		else if(count($appname) == 0)			return 0 ;		else		{			$i = 0 ;			while(array_key_exists($i,$appname))			{ $i++ ;}			return $i ;		}	}		public function parsedToConfig($dir,$appname,$version)	{		$file_appconfig = $dir.DIRECTORY_SEPARATOR.".appconfig" ;		$file_config = $dir.DIRECTORY_SEPARATOR."config.yaml" ;		if(!file_exists($file_config))			$this->createConfigFile($file_config,$appname,$version) ;		if(file_exists($file_appconfig))			unlink($file_appconfig) ;		$temp = new KobeYamlParser() ;		$ttt = $temp->ParseFile($file_config) ;				$inputHash = false ;		if(isset($ttt["handle"]) && is_array($ttt["handle"]))		{			foreach($ttt["handle"] as $num => $ar)			{				foreach($ar as $key => $value)				{					if(is_array($inputHash[$key]))					{						array_push($inputHash[$key],$value) ;					}					else					{						$inputHash[$key] = array($value) ;					}				}			}		}				$errput = "";		$output = true ;		if($inputHash != false)			$output = yaml2appconfig($inputHash, "", $errput);		if($output)		{			if($output === true)				$output = "\n" ;			file_put_contents($file_appconfig,$output) ;			return true ;		}		else			return false ;	}		public function createConfigFile($file,$appname,$version)	{		if(file_exists($file))			return true ;		$handle = fopen($file,"x") ;		if(!$handle)			return false ;		$str = "---\nname: $appname\nversion: $version\n...\n" ;		fwrite($handle,$str) ;		fclose($handle) ;		return true ;	}	public function createIndexFile($filename)	{		if(file_exists($filename))			return true ;		$handle = fopen($filename,"x") ;		if(!$handle)			return false ;		$str = "<?php\necho '<strong>Welcome to SAE!</strong>';" ;		fwrite($handle,$str) ;		fclose($handle) ;		return true ;	}		function get_filenames($dirname)	{		if($handle=opendir($dirname))		{			$dirs = array() ;			while (false !== ($file = readdir($handle))) 				{				if($file=="." || $file=="..")					continue ;				$fi = $dirname.DIRECTORY_SEPARATOR.$file ;				if(is_file($fi))					array_push($dirs,$file) ;			}			closedir($handle) ;			return $dirs ;		}		else			return false ;	}		//获取vhost文件的的appname	function get_app_host($appname,$vhostdir)	{		$app_host = array() ;		$hosts = $this->get_filenames($vhostdir) ;		foreach($hosts as $value)		{			$elem = $this->split_host_filename($value) ;			if($elem[0] == $appname)			{				array_push($app_host,$value) ;			}		}		return $app_host ;	}	function split_host_filename($filename)	{		$elem = preg_split("/[-]+/",$filename) ;		if(count($elem) < 3)			return array() ;				if(count($elem) == 3)			return $elem ;		$is_def = $elem[count($elem)-2]=='default' ? 1 : 0 ;		$appname = '' ;		$i = 0 ;		for($i=0;$i<count($elem)-2-$is_def;$i++)		{			$appname .= $elem[$i] ;		}		$ver = $elem[$i] ;		if($is_def == 1)			return array($appname,$ver,'default',$elem[count($elem)-1]) ;		else			return array($appname,$ver,$elem[count($elem)-1]) ;	}		//添加应用中缺少的vhost文件	function lost_host(&$elems,$host_file,$version,$appname,$vhostdir,$wwwroot)	{		foreach($version as $value)		{				$tag = false ;			foreach($elems as $key => $mess)			{				if($value == $mess[1])				{					$tag = true ;					break ;				}							}			if($tag == false)			{				$this->create_vhost_file($value,$appname,$vhostdir,$wwwroot) ;				array_push($elems,array($appname,$value,'vhost.conf')) ;			}		}	}	//删除应用中多于的vhost文件	function more_host(&$elems,$host_file,$version,$appname,$vhostdir)	{		foreach($elems as $key => $value)		{			if(in_array($value[1],$version) === false)			{				unset($elems[$key]) ;				unlink($vhostdir.DIRECTORY_SEPARATOR.$host_file[$key]) ;			}		}	}		function create_vhost_file($version,$appname,$vhostdir,$wwwroot,$is_default=false)	{		$confs = $this->confs ;		$vhost_name = $vhostdir ;		$SAEStorage = $this->SAEStorage ;		$app_ver_dir = $wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version ;		$stro_dir = $SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname ;		$stro_temp_dir = $SAEStorage.DIRECTORY_SEPARATOR.'tempstorage' ;		$stro_attr_dir = $SAEStorage.DIRECTORY_SEPARATOR.'attrstorage' ;		$open_basedir = trim($this->open_basedir,'"') ;		$confdir = realpath($vhostdir.DIRECTORY_SEPARATOR.'..') ;		$ServerName = '' ;		$ServerAlias = '' ;		if($is_default == true)		{			$ServerName = $appname.'.'.$this->confs["domain"].'.com' ;			$ServerAlias = '*.'.$appname.'.'.$this->confs["domain"].'.com' ;			$vhost_name .= DIRECTORY_SEPARATOR.$appname.'-'.$version.'-default-vhost.conf' ;		}		else		{			$ServerName = $version.'.'.$appname.'.'.$this->confs["domain"].'.com' ;			$ServerAlias = '*.'.$version.'.'.$appname.'.'.$this->confs["domain"].'.com' ;			$vhost_name .= DIRECTORY_SEPARATOR.$appname.'-'.$version.'-vhost.conf' ;		}		$vhost_template = file_get_contents($confdir.DIRECTORY_SEPARATOR.'vhost.txt') ;		$vhost = str_replace(			array('[$DocumentRoot]','[$ServerName]','[$open_basedir]','[$access]','[$secret]','[$port]','[$appname]','[$appversion]','[$ServerAlias]'),			array($app_ver_dir , $ServerName, $open_basedir, $confs["mysql_user"], $confs["mysql_pass"], $confs["mysql_port"], $appname, $version, $ServerAlias),			$vhost_template) ;		file_put_contents($vhost_name,$vhost,LOCK_EX);	}		function get_storage_num($appname,&$stornum,&$allstornum)	{		foreach($this->local_env as $value)		{			if($value['appname'] == $appname)			{				$stornum = count($value['storage']) ;			}			$allstornum += count($value['storage']) ;		}	}		//清除没用的数据，可能是某个应用已经不存在了，可是它的storage数据还存在，这里就是清除这些数据	function clean_unless_file($app_dbnum,$vhostdir)	{		$SAEStorage = $this->SAEStorage ;		$this->clean_dir_file($vhostdir,$app_dbnum,false) ;		$this->clean_dir_file($SAEStorage.DIRECTORY_SEPARATOR.'storage',$app_dbnum) ;		$this->clean_dir_file($SAEStorage.DIRECTORY_SEPARATOR.'tempstorage',$app_dbnum) ;		$this->clean_dir_file($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage',$app_dbnum) ;	}	function clean_dir_file($dir,$app_dbnum,$is_stor = true)	{		if($handle=opendir($dir))		{			while (false !== ($file = readdir($handle))) 				{				if($file=="." || $file=="..")					continue ;				$filename = $dir.DIRECTORY_SEPARATOR.$file ;				if($is_stor == false)				{					if(!is_file($filename))						remove_dir($filename) ;					else					{						$temp = $this->split_host_filename($file) ;						if(array_key_exists($temp[0],$app_dbnum) == false)							unlink($filename) ;					}				}				else				{					if(is_file($filename))						unlink($filename) ;					else					{						if(array_key_exists($file,$app_dbnum) == false)							remove_dir($file) ;					}				}			}			closedir($handle) ;		}	}		public function analyze_read($read)	{		if(empty($read))			return false ;		$command = array() ;		$argument = preg_split("/[\s\t]/",$read) ;		for($i=0;$i<count($argument);$i++)		{			$temp = $argument[$i] ;			$temp = trim($temp) ;			if($temp != "")			{				//$temp = strtolower($temp) ;				array_push($command,$temp) ;			}		}		return $command ;	}		public function create_app($appname)	{		$SAEStorage = $this->SAEStorage ;		$wwwroot = $this->confs["DocumentRoot"] ;		$appnum = $this->appnum ;		if(!file_exists($wwwroot.DIRECTORY_SEPARATOR.$appname))			mkdir($wwwroot.DIRECTORY_SEPARATOR.$appname) ;				$redis = $this->redis ;		$dbnum = $this->get_dbnum($this->local_env,$appnum) ;		$this->local_env[$dbnum]['appname'] = $appname ;		$this->app_dbnum[$appname] = $dbnum ;		$redis->select($appnum) ;		$redis->hSet("app-num",$appname,$dbnum) ;				if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname))			mkdir($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname) ;		if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'tempstorage'.DIRECTORY_SEPARATOR.$appname))			mkdir($SAEStorage.DIRECTORY_SEPARATOR.'tempstorage'.DIRECTORY_SEPARATOR.$appname) ;		if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname))			mkdir($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname) ;		$storage = get_dirnames($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname) ;		$version = get_dirnames($wwwroot.DIRECTORY_SEPARATOR.$appname) ;		foreach($version as $key=>$val)		{			if(!is_numeric($val))				unset($version[$key]) ;		}		$this->local_env[$dbnum]['version'] = $version ;		$this->local_env[$dbnum]['storage'] = $storage ;		$this->local_env[$dbnum]['default'] = '' ;		return 1 ;	}		public function delete_app($appname)	{		$SAEStorage = realpath(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'storage') ;				$redis = $this->redis ;		$redis->select($this->appnum) ;		$redis->hDel("app-num",$appname) ;		$redis->select($this->app_dbnum[$appname]) ;		$redis->flushdb() ;		$app_hosts = $this->get_app_host($appname,$this->vhostdir) ;		foreach($app_hosts as $host)		{			unlink($this->vhostdir.DIRECTORY_SEPARATOR.$host) ;		}		remove_dir($this->confs["DocumentRoot"].DIRECTORY_SEPARATOR.$appname) ;		remove_dir($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname) ;		remove_dir($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname) ;		remove_dir($SAEStorage.DIRECTORY_SEPARATOR.'tempstorage'.DIRECTORY_SEPARATOR.$appname) ;		unset($this->local_env[$this->app_dbnum[$appname]]) ;		unset($this->app_dbnum[$appname]) ;	}		public function create_storage($domain)	{		$SAEStorage = $this->SAEStorage ;		$appname = $this->now_app_name ;		if(!file_exists($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$domain))			mkdir($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$domain) ;		array_push($this->local_env[$this->app_dbnum[$appname]]['storage'],$domain) ;	}		public function delete_storage($domain)	{		$SAEStorage = $this->SAEStorage ;		$appname = $this->now_app_name ;		foreach($this->local_env[$this->app_dbnum[$appname]]['storage'] as $key => $value)		{			if($value == $domain)			{				unset($this->local_env[$this->app_dbnum[$appname]]['storage'][$key]) ;				break ;			}		}		if(file_exists($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$domain))			remove_dir($SAEStorage.DIRECTORY_SEPARATOR.'storage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$domain) ;		if(file_exists($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.'file_sttr_'.$domain))			unlink($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.'file_sttr_'.$domain) ;		if(file_exists($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$domain))			unlink($SAEStorage.DIRECTORY_SEPARATOR.'attrstorage'.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$domain) ;	}		public function create_version($version)	{		$appname = $this->now_app_name ;		$wwwroot = $this->rootdir ;		if(!file_exists($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version))			mkdir($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version) ;		if(count($this->local_env[$this->app_dbnum[$appname]]['version']) < 1)		{			$this->create_vhost_file($version,$appname,$this->vhostdir,$wwwroot,true) ;			$this->local_env[$this->app_dbnum[$appname]]['default'] = $version ;		}					$this->create_vhost_file($version,$appname,$this->vhostdir,$wwwroot) ;		$this->createConfigFile($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR."config.yaml",$appname,$version) ;		$this->createIndexFile($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version.DIRECTORY_SEPARATOR."index.php") ;		$this->parsedToConfig($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version,$appname,$version) ;		array_push($this->local_env[$this->app_dbnum[$appname]]['version'],$version) ;	}		public function delete_version($version)	{		$appname = $this->now_app_name ;		$wwwroot = $this->rootdir ;		if(file_exists($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version))			remove_dir($wwwroot.DIRECTORY_SEPARATOR.$appname.DIRECTORY_SEPARATOR.$version) ;		//不能删除默认版本		if(file_exists($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$version.'-vhost.conf'))			unlink($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$version.'-vhost.conf') ;		foreach($this->local_env[$this->app_dbnum[$appname]]['version'] as $key => $value)		{			if($value == $version)			{				unset($this->local_env[$this->app_dbnum[$appname]]['version'][$key]) ;				break ;			}		}	}		public function set_default_varsion($version)	{		$appname = $this->now_app_name ;		$wwwroot = $this->rootdir ;		$old_def = $this->local_env[$this->app_dbnum[$appname]]['default'] ;		//if(file_exists($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$version.'-vhost.conf'))		//	unlink($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$version.'-vhost.conf') ;		if(file_exists($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$old_def.'-default-vhost.conf'))			unlink($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$old_def.'-default-vhost.conf') ;		$this->create_vhost_file($version,$appname,$this->vhostdir,$wwwroot,true) ;		if(file_exists($this->vhostdir.DIRECTORY_SEPARATOR.$appname.'-'.$old_def.'-vhost.conf') ===false)			$this->create_vhost_file($old_def,$appname,$this->vhostdir,$wwwroot) ;		$this->local_env[$this->app_dbnum[$appname]]['default'] = $version ;	}		function uninstall_local()	{		$this->stop_redis() ;		$this->stop_apache() ;		$this->closehost() ;		$this->uninstall_apache() ;		if(file_exists($this->temp_dir.DIRECTORY_SEPARATOR.'redis.conf'))			unlink($this->temp_dir.DIRECTORY_SEPARATOR.'redis.conf') ;		if(file_exists($this->temp_dir.DIRECTORY_SEPARATOR.'httpd.conf'))			unlink($this->temp_dir.DIRECTORY_SEPARATOR.'httpd.conf') ;		if(file_exists($this->temp_dir.DIRECTORY_SEPARATOR.'redis.swap'))			unlink($this->temp_dir.DIRECTORY_SEPARATOR.'redis.swap') ;	}		public function svn_help()	{		echo iconv('UTF-8','GBK','svn的命令帮助信息：')."\n" ;		echo iconv('UTF-8','GBK','chickoutall/coa                                      下载账户中所有应用的代码')."\n\n" ;		echo iconv('UTF-8','GBK','chickout/co $appname [-v=$version]                   如果没有指定-v选项，则是下载$appname的所有版本代码，如果指定了-v选项，则下载$appname应用的$version版本的代码')."\n\n" ;		echo iconv('UTF-8','GBK','add [-v=$version] $filename [$filename2 ...]         添加一个或者多个文件到svn的代码库中，如果指定-v选项，就是添加$version版本的文件，如果没有指定-v选项，就是添加默认版本的文件')."\n\n" ;		echo iconv('UTF-8','GBK','addall [-v=$version]                                 将所有没在代码库中的文件添加到代码库中，如果指定-v选项，就是添加$version版本的文件，如果没有指定-v选项，就是添加默认版本的文件')."\n\n" ;		echo iconv('UTF-8','GBK','saddall [-v=$version]                                显示addall [-v=$version]要添加的文件')."\n\n" ;		echo iconv('UTF-8','GBK','delete/del [-v=$version] $filename [$filename2 ...]  删除一个或者多个文件，如果指定-v选项，就是删除$version版本的文件，如果没有指定-v选项，就是删除默认版本的文件')."\n\n" ;		echo iconv('UTF-8','GBK','delall  [-v=$version]                                将所有已经删除的文件从代码库中删除，，如果指定-v选项，就是删除$version版本的文件，如果没有指定-v选项，就是删除默认版本的文件')."\n\n" ;		echo iconv('UTF-8','GBK','sdelall [-v=$version]                                显示delall  [-v=$version]要删除的文件')."\n\n" ;		echo iconv('UTF-8','GBK','update/up [-v=$version]                              更新代码，如果指定-v选项，则更新$version版本的文件，如果没有指定-v选项，则更新默认版本的文件')."\n\n" ;		echo iconv('UTF-8','GBK','commit/ci                                            [-v=$version]  将代码库中所做的修改上传到线上环境的代码库中，如果指定了-v选项，就是将$version版本所做的修改上传到线上环境的代码库中，如果没有指定-v选项，就是讲默认版本的修改上传到代码库中')."\n\n" ;		echo iconv('UTF-8','GBK','stat [-v=$version]                                   显示svn文件的状态，如果指定-v选项，则显示$version版本的文件状态，如果没有指定-v选项，则显示默认版本的文件状态')."\n\n" ;		echo iconv('UTF-8','GBK','上面的命令(除过chickoutall和chickout)使用之前都应调用use命令来选择一个应用进行操作')."\n\n" ;	}		public function host_help()	{		echo iconv('UTF-8','GBK','host的命令帮助信息：')."\n" ;		echo iconv('UTF-8','GBK','openhost             开启host的绑定，使用这个命令将会绑定当前所有应用所有版本的host')."\n\n" ;		echo iconv('UTF-8','GBK','closehost            关闭host绑定，使用这个命令将会取消绑定当前所有应用所有版本的host')."\n\n" ;		echo iconv('UTF-8','GBK','addhost [$version]    添加当前应用的host绑定，如果指定version，则是添加当天应用version这个版本的host，如果没有指定version，则是添加当前应用所有版本的host。')."\n\n" ;		echo iconv('UTF-8','GBK','delhost [$version]    删除当前应用绑定的host。如果指定version，则会删除当前应用version版本的host，如果没有指定version，则会删除当前应用所有版本的host，包括默认版本的host')."\n\n" ;	}		public function apache_help()	{		echo iconv('UTF-8','GBK','apache的命令帮助信息：')."\n" ;		echo iconv('UTF-8','GBK','apachestat           查看当前apache服务器的状态，是启动状态还是关闭状态')."\n\n" ;		echo iconv('UTF-8','GBK','apachestart          启动apache服务')."\n\n" ;		echo iconv('UTF-8','GBK','apachestop           停止apache服务')."\n\n" ;		echo iconv('UTF-8','GBK','apacherestart        重启apache服务')."\n\n" ;	}		public function app_help()	{		echo iconv('UTF-8','GBK','应用的命令帮助信息：')."\n" ;		echo iconv('UTF-8','GBK','capp $appname        创建一个应用，$appname为应用名称')."\n\n" ;		echo iconv('UTF-8','GBK','dapp $appname        删除一个应用，$appname为应用名称')."\n\n" ;		echo iconv('UTF-8','GBK','cstorage $domain     创建一个storage，$domain为创建的storage的名称')."\n\n" ;		echo iconv('UTF-8','GBK','dstorage $domain     删除一个storage，$domain为要删除的storage的名称')."\n\n" ;		echo iconv('UTF-8','GBK','cversion $version    创建一个应用的版本,$version为要创建的版本号')."\n\n" ;		echo iconv('UTF-8','GBK','dversion $version    删除一个应用的版本，$version为要删除的版本号')."\n\n" ;		echo iconv('UTF-8','GBK','use $appname         选择一个应用来进行操作,$appname为应用名称')."\n\n" ;		echo iconv('UTF-8','GBK','defver $version      设置应用的默认版本,$version为版本号')."\n\n" ;		echo iconv('UTF-8','GBK','sversions            显示当前应用的所有版本号')."\n\n" ;		echo iconv('UTF-8','GBK','sversion             显示当前默认版本号')."\n\n" ;		echo iconv('UTF-8','GBK','sstorages            显示当前应用所有的storage名称')."\n\n" ;		echo iconv('UTF-8','GBK','sapp                 显示当前选择的应用名称')."\n\n" ;		echo iconv('UTF-8','GBK','sapps                显示当前所有的应用名称')."\n\n" ;		echo iconv('UTF-8','GBK','upconfig $version    更新$version版本的config.yaml文件，使配置起作用')."\n\n" ;		echo iconv('UTF-8','GBK','upallconfig          更新当前应用所有版本的config.yaml文件，使这些配置起作用')."\n\n" ;	}		public function other_help()	{		echo iconv('UTF-8','GBK','其它命令的帮助信息：')."\n" ;		echo iconv('UTF-8','GBK','changeuser           用来修改本地开发环境中使用的SAE的安全邮箱和密码，这个命令不带参数，使用该命令会提示你输入用户名和密码')."\n\n" ;		echo iconv('UTF-8','GBK','quit/exit            退出本地开发环境')."\n\n" ;		echo iconv('UTF-8','GBK','restart              重启本地开发环境')."\n\n" ;		echo iconv('UTF-8','GBK','saever               显示本地开发环境的当前版本')."\n\n" ;		echo iconv('UTF-8','GBK','uninstall            卸载本地开发环境，这个命令是清理本地开发环境中的临时数据，并卸载apache服务')."\n\n" ;		echo iconv('UTF-8','GBK','clear                用来清屏的')."\n\n" ;	}		public function all_help() 	{		$this->app_help() ;		echo "\n\n" ;		$this->apache_help() ;		echo "\n\n" ;		$this->host_help() ;		echo "\n\n" ;		$this->svn_help() ;		echo "\n\n" ;		$this->other_help() ;	}		public function help_help()	{		echo iconv('UTF-8','GBK','help命令的帮助信息：')."\n" ;		echo iconv('UTF-8','GBK','-host            显示host相关的命令信息')."\n\n" ;		echo iconv('UTF-8','GBK','-svn             显示svn相关的命令信息')."\n\n" ;		echo iconv('UTF-8','GBK','-app             显示应用相关的命令信息')."\n\n" ;		echo iconv('UTF-8','GBK','-other           显示其他命令信息')."\n\n" ;		echo iconv('UTF-8','GBK','-apache          显示apache相关的命令信息')."\n\n" ;		echo iconv('UTF-8','GBK','-all             显示全部命令信息')."\n\n" ;		echo iconv('UTF-8','GBK','$command         显示$command这个命令信息，这个命令必须是本地开发环境存在的命令')."\n\n" ;	}		public function command_help($command)	{		$commands = array() ;		$commands['capp'] = 'capp $appname        创建一个应用，$appname为应用名称';		$commands['dapp'] = 'dapp $appname        删除一个应用，$appname为应用名称';		$commands['cstorage'] = 'cstorage $domain     创建一个storage，$domain为创建的storage的名称' ;		$commands['dstorage'] = 'dstorage $domain     删除一个storage，$domain为要删除的storage的名称' ;		$commands['cversion'] = 'cversion $version    创建一个应用的版本,$version为要创建的版本号';		$commands['dversion'] = 'dversion $version    删除一个应用的版本，$version为要删除的版本号' ;		$commands['use'] = 'use $appname         选择一个应用来进行操作,$appname为应用名称';		$commands['defver'] = 'defver $version      设置应用的默认版本,$version为版本号' ;		$commands['sversions'] = 'sversions            显示当前应用的所有版本号' ;		$commands['sversion'] = 'sversion             显示当前默认版本号' ;		$commands['sstorages'] = 'sstorages            显示当前应用所有的storage名称';		$commands['sapp'] = 'sapp                 显示当前选择的应用名称' ;		$commands['sapps'] = 'sapps                显示当前所有的应用名称';		$commands['upconfig'] = 'upconfig $version    更新$version版本的config.yaml文件，使配置起作用';		$commands['upallconfig'] = 'upallconfig          更新当前应用所有版本的config.yaml文件，使这些配置起作用';				$commands['changeuser'] = 'changeuser           用来修改本地开发环境中使用的SAE的安全邮箱和密码，这个命令不带参数，使用该命令会提示你输入用户名和密码' ;		$commands['quit'] = 'quit/exit            退出本地开发环境' ;		$commands['exit'] = 'quit/exit            退出本地开发环境' ;		$commands['restart'] = 'restart              重启本地开发环境' ;		$commands['saever'] = 'saever               显示本地开发环境的当前版本' ;		$commands['uninstall'] = 'uninstall            卸载本地开发环境，这个命令是清理本地开发环境中的临时数据，并卸载apache服务';		$commands['clear'] = 'clear                用来清屏的' ;				$commands['apachestat'] = 'apachestat           查看当前apache服务器的状态，是启动状态还是关闭状态';		$commands['apachestart'] = 'apachestart          启动apache服务';		$commands['apachestop'] = 'apachestop           停止apache服务';		$commands['apacherestart'] = 'apacherestart        重启apache服务';				$commands['openhost'] = 'openhost             开启host的绑定，使用这个命令将会绑定当前所有应用所有版本的host';		$commands['closehost'] = 'closehost            关闭host绑定，使用这个命令将会取消绑定当前所有应用所有版本的host' ;		$commands['addhost'] = 'addhost [$version]    添加当前应用的host绑定，如果指定version，则是添加当天应用version这个版本的host，如果没有指定version，则是添加当前应用所有版本的host。' ;		$commands['delhost'] = 'delhost [$version]    删除当前应用绑定的host。如果指定version，则会删除当前应用version版本的host，如果没有指定version，则会删除当前应用所有版本的host，包括默认版本的host' ;				$commands['chickoutall'] = 'chickoutall/coa                                      下载账户中所有应用的代码' ;		$commands['coa'] = 'chickoutall/coa                                      下载账户中所有应用的代码' ;		$commands['chickout'] = 'chickout/co $appname [-v=$version]                   如果没有指定-v选项，则是下载$appname的所有版本代码，如果指定了-v选项，则下载$appname应用的$version版本的代码' ;		$commands['co'] = 'chickout/co $appname [-v=$version]                   如果没有指定-v选项，则是下载$appname的所有版本代码，如果指定了-v选项，则下载$appname应用的$version版本的代码' ;		$commands['add'] = 'add [-v=$version] $filename [$filename2 ...]         添加一个或者多个文件到svn的代码库中，如果指定-v选项，就是添加$version版本的文件，如果没有指定-v选项，就是添加默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['addall'] = 'addall [-v=$version]                                 将所有没在代码库中的文件添加到代码库中，如果指定-v选项，就是添加$version版本的文件，如果没有指定-v选项，就是添加默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['saddall'] = 'saddall [-v=$version]                                显示addall [-v=$version]要添加的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['delete'] = 'delete/del [-v=$version] $filename [$filename2 ...]  删除一个或者多个文件，如果指定-v选项，就是删除$version版本的文件，如果没有指定-v选项，就是删除默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['del'] = 'delete/del [-v=$version] $filename [$filename2 ...]  删除一个或者多个文件，如果指定-v选项，就是删除$version版本的文件，如果没有指定-v选项，就是删除默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['delall'] = 'delall  [-v=$version]                                将所有已经删除的文件从代码库中删除，，如果指定-v选项，就是删除$version版本的文件，如果没有指定-v选项，就是删除默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['sdelall'] = 'sdelall [-v=$version]                                显示delall  [-v=$version]要删除的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['update'] = 'update/up [-v=$version]                              更新代码，如果指定-v选项，则更新$version版本的文件，如果没有指定-v选项，则更新默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['up'] = 'update/up [-v=$version]                              更新代码，如果指定-v选项，则更新$version版本的文件，如果没有指定-v选项，则更新默认版本的文件,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['commit'] = 'commit/ci                                            [-v=$version]  将代码库中所做的修改上传到线上环境的代码库中，如果指定了-v选项，就是将$version版本所做的修改上传到线上环境的代码库中，如果没有指定-v选项，就是讲默认版本的修改上传到代码库中,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['ci'] = 'commit/ci                                            [-v=$version]  将代码库中所做的修改上传到线上环境的代码库中，如果指定了-v选项，就是将$version版本所做的修改上传到线上环境的代码库中，如果没有指定-v选项，就是讲默认版本的修改上传到代码库中,使用该命令之前应调用use命令来选择一个应用进行操作' ;		$commands['stat'] = 'stat [-v=$version]                                   显示svn文件的状态，如果指定-v选项，则显示$version版本的文件状态，如果没有指定-v选项，则显示默认版本的文件状态,使用该命令之前应调用use命令来选择一个应用进行操作' ;				if(array_key_exists($command,$commands) == false)		{			echo iconv('UTF-8','GBK','本地开发环境没有您要查找的命令') ;			return false ;		}		else		{			echo iconv('UTF-8','GBK',$commands[$command]) ;			return true ;		}	}		function show_help($arg = '')	{		if($arg == '')			$this->help_help() ;		else		{			switch($arg)			{			case '-host':				$this->host_help() ;				break ;			case '-svn':				$this->svn_help() ;				break ;			case '-other':				$this->other_help() ;				break ;			case '-apache':				$this->apache_help() ;				break ;			case '-app':				$this->app_help() ;				break ;			case '-all':				$this->all_help() ;				break ;			default:				$this->command_help($arg) ;				break ;			}		}	}}function stringToProxyContext($http_proxy_host,$http_proxy_port,$http_proxy_username,$http_proxy_password){	$http_proxy_a=array(                     'http' => array(                                     'proxy' => 'tcp://'.$http_proxy_host.':'.$http_proxy_port,                                     'request_fulluri' => True,                                    ),                    );	if($http_proxy_username!="")	{		$auth=base64_encode($http_proxy_username.':'.$http_proxy_password);		$http_proxy_a['http']['header']="Proxy-Authorization: Basic $auth";	}	return stream_context_create($http_proxy_a);}//获取message.txt不同字段的值function getMessage($str){	$rootdir = realpath(__DIR__.DIRECTORY_SEPARATOR."..").DIRECTORY_SEPARATOR ;	$messagestr = file_get_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt') ;	$message = returnLines($messagestr) ;	$mess = '' ;	foreach($message as $key => $value)	{		$temp = preg_split("/[\s\t]/",$value,2) ;		if($temp[0] == $str)		{			$mess = $temp[1] ;			break ;		}		else			continue ;	}	return trim($mess) ;}function setMessage($command_key,$old_value,$new_value){	$rootdir = realpath(__DIR__.DIRECTORY_SEPARATOR."..").DIRECTORY_SEPARATOR ;	$messagestr = file_get_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt') ;	$message = returnLines($messagestr) ;	foreach($message as $key => $value)	{		$temp = preg_split("/[\s\t]/",$value,2) ;		if($temp[0] == $command_key)		{			//$messagestr = str_replace($command_key." ".$old_value,$command_key." ".$new_value,$messagestr) ;			if($temp[1] != "")				$messagestr = str_replace($temp[1],$new_value,$messagestr) ;			else				$messagestr = str_replace($messagestr,trim($messagestr)." ".$new_value,$messagestr) ;			file_put_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt',$messagestr) ;			return true ;		}	}	$messagestr .= "\n".$command_key." ".$new_value ;	file_put_contents($rootdir.'emulation'.DIRECTORY_SEPARATOR.'message.txt',$messagestr) ;	return true ;}function returnLines($str) {	if(empty($str))		return array() ;	$lines  = explode("\n",$str) ;	foreach($lines as $key=>$value)	{		if(trim($value)=="")			unset($lines[$key]) ;	}	return $lines ;}function mkdir_r($dirName, $rights=0777){	$dirs = explode(DIRECTORY_SEPARATOR, $dirName);	$dir='';	foreach($dirs as $part)    {        $dir.=$part.DIRECTORY_SEPARATOR;        if(!is_dir($dir) && strlen($dir)>0)			mkdir($dir, $rights);    }}function IsWindows(){	return strncmp(PHP_OS,'W',1)==0;}function system_bits(){	$cmd = 'systeminfo  | findstr "X86-based"' ;	$mess = rerun($cmd,"",$runresource) ;	//$mess = exec($cmd) ;	if(trim($mess) == '')		return '64' ;	else		return '32' ;}function removeDir($path){	if(substr($path, -1, 1) != "/")		$path .= "/";	$normal_files = glob($path . "*");	$hidden_files = glob($path . "\.?*");	$all_files = array_merge($normal_files, $hidden_files);	foreach($all_files as $file)	{         if(preg_match("/(\.|\.\.)$/", $file))            continue;         if(is_file($file)===TRUE)            unlink($file);         else if (is_dir($file) === TRUE)            removeDir($file);	}	if(is_dir($path)=== TRUE) 		rmdir($path);}function remove_dir($dirname) {	if(!file_exists($dirname))	{		return false ;	}	if(!is_dir($dirname))	{		return false ;	}	if($handle=opendir($dirname))	{		while (false !== ($file = readdir($handle))) 			{			if($file=="." || $file=="..")				continue ;			$dir_file = $dirname.DIRECTORY_SEPARATOR.$file ;			if(is_dir($dir_file))				remove_dir($dir_file) ;			else				unlink($dir_file) ;		}		closedir($handle) ;		rmdir($dirname) ;	}}function run($dir,$pstr,&$runresources = null,$is_redis=false){	echo iconv('UTF-8','GBK',$pstr);	$runresources = proc_open($dir,array( 0 => array('pipe', 'r'), 1 => array('pipe', 'w') ),$pipesarray);	stream_set_blocking($pipesarray[1],0);	//sleep(1) ;	fclose($pipesarray[0]) ;	fclose($pipesarray[1]) ;	$ret = proc_get_status($runresources);	if($is_redis == false)	proc_close($runresources) ;	return $ret ;}function rerun($dir,$pstr,&$runresources = null){	$runresources = proc_open($dir,array( 0 => array('pipe', 'r'), 1 => array('pipe', 'w') ),$pipesarray);	stream_set_blocking($pipesarray[1],0);	echo iconv('UTF-8','GBK',$pstr);	$ret = stream_get_contents($pipesarray[1]);	fclose($pipesarray[0]) ;	fclose($pipesarray[1]) ;	proc_close($runresources) ;	return $ret ;}function get_dirnames($dirname) {	if($handle=opendir($dirname))	{		$dirs = array() ;		while (false !== ($file = readdir($handle))) 			{			if($file=="." || $file=="..")				continue ;			$dir_file = $dirname.DIRECTORY_SEPARATOR.$file ;			if(is_dir($dir_file))				array_push($dirs,$file) ;		}		closedir($handle) ;		return $dirs ;	}	else		return false ;}?>